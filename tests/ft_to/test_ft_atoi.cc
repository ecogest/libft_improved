/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_ft_atoi.cc                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mjacq <mjacq@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/05/07 10:56:25 by mjacq             #+#    #+#             */
/*   Updated: 2021/05/07 15:00:33 by mjacq            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <gtest/gtest.h>

extern "C" {
#include "libft.h"
#include <stdlib.h>
#include <stdio.h>
}

struct AtoiTest: public ::testing::TestWithParam<const char *> {
	const char *input = GetParam();
};

TEST_P(AtoiTest, tests) {
	EXPECT_EQ(ft_atoi(input), atoi(input));
	printf("input: %s ; output: %d ", input, ft_atoi(input));
}

/* ============================== Pure numbers ============================== */

INSTANTIATE_TEST_SUITE_P(AtoiTestSuite, AtoiTest, testing::Values(
			"0", "1", "2", "-1", "-2", "42", "43", "-42", "-43" // Basic
			"2147483646", "2147483647", "2147483648", "2147483649", // Close to INT_MAX
			"+2147483646", "+2147483647", "+2147483648", "+2147483649", // Close to INT_MAX
			"-2147483646", "-2147483647", "-2147483648", "-2147483649", // Close to INT_MIN
			"21474836460", "21474836470", "21474836480", "21474836490", // Close to 10 * INT_MAX
			"-21474836460", "-21474836470", "-21474836480", "-21474836490", // Close to 10 * INT_MAX
			"9223372036854775806", "9223372036854775807", "9223372036854775808", "9223372036854775809", "9223372036854775810",  // Close to LONG_MAX
			"-9223372036854775806", "-9223372036854775807", "-9223372036854775808", "-9223372036854775809","-9223372036854775810",  // Close to LONG_MIN
			"9999999999999999999999999999999", "-999999999999999999999999999999" // Far too big
			));

/* ================================= Spaces ================================= */

INSTANTIATE_TEST_SUITE_P(AtoiTestSpaceSuite, AtoiTest, testing::Values(
			" -42", "\f-42", "\r-42", "\t-42", "\v-42", " \f\r\t\v-42     ", "   -4 2\t2", "-4\t 2", "- 42", // single or combined
			"                                                          42", // long space
			" \f\r\t\v0", " \f\r\t\v1", " \f\r\t\v2", " \f\r\t\v-1", " \f\r\t\v-2", " \f\r\t\v42", " \f\r\t\v43", " \f\r\t\v-42", " \f\r\t\v-43" // Basic
			" \f\r\t\v2147483646", " \f\r\t\v2147483647", " \f\r\t\v2147483648", " \f\r\t\v2147483649", // Close to INT_MAX
			" \f\r\t\v-2147483646", " \f\r\t\v-2147483647", " \f\r\t\v-2147483648", " \f\r\t\v-2147483649", // Close to INT_MIN
			" \f\r\t\v21474836460", " \f\r\t\v21474836470", " \f\r\t\v21474836480", " \f\r\t\v21474836490", // Close to 10 * INT_MAX
			" \f\r\t\v-21474836460", " \f\r\t\v-21474836470", " \f\r\t\v-21474836480", " \f\r\t\v-21474836490", // Close to 10 * INT_MAX
			" \f\r\t\v9223372036854775806", " \f\r\t\v9223372036854775807", " \f\r\t\v9223372036854775808", " \f\r\t\v9223372036854775809", " \f\r\t\v9223372036854775810",  // Close to LONG_MAX
			" \f\r\t\v-9223372036854775806", " \f\r\t\v-9223372036854775807", " \f\r\t\v-9223372036854775808", " \f\r\t\v-9223372036854775809"," \f\r\t\v-9223372036854775810"  // Close to LONG_MIN
			));

/* =============================== Junk chars =============================== */

INSTANTIATE_TEST_SUITE_P(AtoiTestJunkSuite, AtoiTest, testing::Values(
			"yo42", "42yo", "4y2o", "y4o2!", "4-2", "4+2",
			"42", "42", "42", "42", "42", "42", "42", "42", "42", "	42", "42", "42",
			"hello", "hello world"
			));
